# .github/workflows/docker-publish-frontend.yml

name: Build and Push Frontend Docker Image to GHCR

# Controls when the action will run. 
# Triggers the workflow on push events but only for the "main" branch.
on:
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-push-frontend-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Grant permissions for the GITHUB_TOKEN to write packages
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

        # New Step: Create .env.staging file from secret
      - name: Create .env.staging file
        run: echo "${{ secrets.ENV_STAGING }}" > .env.staging
        shell: bash

      # Step 2: Log in to the GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # The context is the directory where the Dockerfile is located.
          # '.' means the root of your repository.
          context: .
          push: true
          # Here we tag the image for GHCR
          tags: |
            ghcr.io/order-now-restaurant/ordernow-cust-frontend:latest
            ghcr.io/order-now-restaurant/ordernow-cust-frontend:${{ github.sha }}

            # ---- NEW DEPLOYMENT JOB ----
  deploy-to-ec2:
    # This job will only run after the 'build-and-push-frontend-image' job is successful
    needs: build-and-push-frontend-image
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to the project directory where your docker-compose.yml is
            cd /path/to/your/project/on/ec2 
            
            # Pull the latest images from GHCR
            docker compose pull
            
            # Stop and restart the services with the new images
            # The -d flag runs the containers in detached mode
            docker compose up -d
            
            # Optional: Clean up old, unused Docker images to save space
            docker image prune -f
