# HTTP to HTTPS Redirect (Handles both domains)
server {
    listen 80;
    server_name ordernow-beta.com www.ordernow-beta.com api.ordernow-beta.com; 
    
    # Redirect all HTTP traffic to the appropriate HTTPS domain
    return 301 https://$host$request_uri;
}

# 1. FRONTEND SERVER BLOCK (Serves Static Files)
server {
    listen 443 ssl;
    server_name ordernow-beta.com www.ordernow-beta.com; 

    # Paths to the SSL files mounted from the EC2 host machine
    ssl_certificate /etc/nginx/ssl/fullchain.pem; 
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Frontend Application Location
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
}

# 2. API SERVER BLOCK (Proxies to Backend Service)
server {
    listen 443 ssl;
    server_name api.ordernow-beta.com;

    # Reuse the same Wildcard certificate files
    ssl_certificate /etc/nginx/ssl/fullchain.pem; 
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Dedicated API Proxy
    location / {
        # 'backend' is the service name in your docker-compose file
        proxy_pass http://backend:8000; 
        
        # Pass essential headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}